#!/usr/bin/env python
import sys
import json
import os
import icaro.core.utils as utils
from icaro.controller.main import Controller
from icaro.controller.versioning import VersionController
import icaro.caching as caching
from icaro.cli.cli import Cli
import inspect

try:
    controller = Controller()
except Exception as e:
    controller = None
    print "No settings file present on the current dir"


def selfLocation():
    return os.path.dirname(os.path.realpath(__file__))


def __buildAll():
    controller.build_all()
    print("Build Success!")
    os.system("chmod -R 777 .")
    os.system("service nginx restart")
    controller.run_all()


def __buildSingle(containerName):
    controller.build(containerName)
    print("Build Success!")
    os.system("chmod -R 777 .")
    os.system("service nginx restart")
    if os.fork() == 0:
        os.system("uwsgi --udp 0.0.0.0:1717")
    controller.run_all_in_container(containerName)


def build(container):
    if container == "all":
        __buildAll()
    else:
        __buildSingle(container)


def __get_functions(self, only_public=True):
    functions = []
    for function in inspect.getmembers(self, predicate=inspect.ismethod):
        functionName = function[1].__name__
        if only_public:
            if functionName[0:2] != "__":
                functions.append(functionName)
        else:
            functions.append(functionName)
    return functions


def upgrade(args):
    type = args.split(",")[0]
    element = args.split(",")[1]
    controller.upgrade(type, element)


def shutAll():
    pass
    #controller.shut(settings)


def startMonitor():
    pass


def runAll(args):
    type = args.split(",")[0]
    controller.run_all()


def run(args):
    type = args.split(",")[0]
    element = args.split(",")[1]
    controller.run(type, element)


def whereismyelement(args):
    type = args.split(",")[0]
    element = args.split(",")[1]
    print(controller.whereismyelement(type, element))


def check_machines():
    print(controller.check_machines())


def versions(args):
    type = args.split(",")[0]
    element = args.split(",")[1]
    print(VersionController(controller.virtualarea, type, element).versions())


def current(args):
    type = args.split(",")[0]
    element = args.split(",")[1]
    print(VersionController(controller.virtualarea, type, element).current_version())


def checkout(args):
    type = args.split(",")[0]
    element = args.split(",")[1]
    version = args.split(",")[2]
    print(VersionController(controller.virtualarea, type, element).checkout(version))


def addversion(args):
    type = args.split(",")[0]
    element = args.split(",")[1]
    version = args.split(",")[2]
    print(VersionController(controller.virtualarea, type, element).addversion(version))


def libs(args):
    type = args.split(",")[0]
    element = args.split(",")[1]
    print(controller.libs(type, element))


def test():
    print(controller.test())


def htop(args):
    containerName = args.split(",")[0]
    print(controller.htop(containerName))


def config_machines():
    print(controller.config_machines())


def update():
    print(controller.update())


def new(project_name):
    import icaro
    file = os.path.dirname(os.path.abspath(icaro.__file__)) + "/prefactor/settings.json"
    content = json.loads(utils.readLines(file))
    content["project_name"] = project_name
    utils.createFolder(project_name)
    utils.fileWrite(project_name + "/settings.json", json.dumps(content, indent=4))


def clean(args):
    type = args.split(",")[0]
    controller.clean(type)

def create_mvn_api(apiName, packageName):
    utils.mvn_call("mvn archetype:generate -DgroupId=" + packageName + " -DartifactId=" = apiName + " -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false")
    utils.importer(os.path.abspath(os.path.join(utils.selfLocation(), os.pardir)) + "/prefactor/"+ lang +"/apis.java","main/java/" + packageName + "/")

def prepare_cli():
    cli = utils.readLines(os.path.dirname(os.path.abspath(icaro.cli.__file__))+"/cli.json")
    cli = json.loads(cli)
    dynamic_arg_commands_element = ['whereismyelement', 'versions', 'checkout', 'current', 'addversion']
    dynamic_arg_commands_container = ['htop', 'build']
    if controller:
        for element in controller.virtualarea.get_all_elements():
            for command in dynamic_arg_commands_element:
                cli["args"][command]["args"][element.type]["args"][element.name] = {}
        for container in controller.virtualarea.get_containers():
            for command in dynamic_arg_commands_container:
                cli["args"][command]["args"][container.name] = {}
    return cli

import icaro.cli
cli_conf = prepare_cli()
Cli(cli_conf)
sys.argv.pop(0)
if len(sys.argv) > 1:
    print getattr(sys.modules[__name__], sys.argv[0])(",".join(sys.argv[1:]))
else:
    if sys.argv:
        print getattr(sys.modules[__name__], sys.argv[0])()
